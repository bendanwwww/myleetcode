"""
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:
输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true

示例 2:
输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

说明:
一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

"""

class Solution(object):
    def isValidSudoku(self, board):
        rowMap = {}
        columnMap = {}
        squareMap = {}
        for x in range(len(board)):
            rowMap[x] = [0] * 10
            for y in range(len(board[x])):
                if y not in columnMap:
                    columnMap[y] = [0] * 10
                squareNum = self.find(x, y)
                if squareNum not in squareMap:
                    squareMap[squareNum] = [0] * 10
                if board[x][y] == '.':
                    continue
                boardNumber = int(board[x][y])
                if rowMap[x][boardNumber] == boardNumber:
                    return False
                if columnMap[y][boardNumber] == boardNumber:
                    return False
                if squareMap[squareNum][boardNumber] == boardNumber:
                    return False
                rowMap[x][boardNumber] = boardNumber
                columnMap[y][boardNumber] = boardNumber
                squareMap[squareNum][boardNumber] = boardNumber
        return True

    def find(self, x, y):
        if x <= 2:
            if y <= 2:
                return 0
            if y <= 5:
                return 1
            if y <= 8:
                return 2
        if x <= 5:
            if y <= 2:
                return 3
            if y <= 5:
                return 4
            if y <= 8:
                return 5
        if x <= 8:
            if y <= 2:
                return 6
            if y <= 5:
                return 7
            if y <= 8:
                return 8

s = Solution()
res = s.isValidSudoku(
[["8","3",".",".","7",".",".",".","."], ["6",".",".","1","9","5",".",".","."], [".","9","8",".",".",".",".","6","."], ["8",".",".",".","6",".",".",".","3"], ["4",".",".","8",".","3",".",".","1"], ["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."], [".",".",".","4","1","9",".",".","5"], [".",".",".",".","8",".",".","7","9"]
])
print(res)